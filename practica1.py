# -*- coding: utf-8 -*-
"""Practicas

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kSh81D_F3dYwJGgM_vFDL9DZFMG8XaIq
"""

#Noé Jaimes Avila
#Inverso de matriz
import sys
import numpy as np
import matplotlib.pyplot as plt

class GaussJ:
    def intercambio(self, f1,f2,n,l):
      for i in range(0,2*n):
          temp=l[f1][i]
          l[f1][i] = l[f2][i]
          l[f2][i] = temp
      return l  
    
    
    def multiplicacionVecEsc(self, k, V):
        #for i in range(len(V)):
        #    V[i] = V[i] * k
        return k * V

    def sumaVectores(self, V1, V2):
        return V1 + V2


    def Eliminacion(self,n,M):
      c=2*n
      for i in range(n):
        if M[i][i] == 0:
          lax=max(list(zip(*M))[i])
          ind=(list(zip(*M))[i]).index(lax)
          GaussJ.intercambio(i,ind,n,M)

        for j in range(n):
            if i != j:
                if M[i][i]==0:
                    sys.exit("El sistema no tiene inversa")
                else:
                    aux = M[j][i]/M[i][i]

                for k in range(c):
                    M[j][k] = M[j][k] - aux * M[i][k]

      for i in range(n):
          if M[i][i]==0:
              sys.exit("El sistema no tiene solucion")
          else:
              M[i] = M[i]/M[i][i]
      return M

def main():

    n=int(input("¿Cuantas ecuaciones deseas que tenga la matriz?"))

    id=np.identity(n)
    li=[[2,0,1],[3,0,0],[5,1,1]] 
    #M=np.array(li)   
    m=np.matrix(np.random.randint(1,50,(n,n)))
    M=np.array(np.concatenate((m,id),axis=1))
    
    print("Matriz inicial")
    print(M)

    # Creación de un objeto
    objG = GaussJ()
    objG.Eliminacion(n,M)
    print("Ejemplo del proceso: matriz invertida")
    print(M)


if __name__ == "__main__":
    main()

import re  
strin=("""En 1929, con la Gran Depresión, el país tenía 15,6 millones de habitantes.
          En 1940 había 22,6 millones de mexicanos.
          En 1950 eran 39,7 millones.
          En 1960 eran 50,5 millones.
          En 1970 eran 63,2 millones.
          En 1980 eran 75,8 millones.
          En 1990 eran 90,6 millones.
          En 2000 eran 101,5 millones.
          En 2010 eran 117 millones.
          En 2017 eran 123,1 millones.
          En 2020 eran 126 millones.""")
print("Ahora a la aplicación, utilizaremos el cambio de la población por año:")
print("_"*58)
print("\n")
print(strin)
print("\n")

print("A partir de esos datos, crearemos una regresión lineal")

s=strin.replace(" ","").split(".")
st=[]
for i in range(0, len(s)-1):
  st.append(re.findall("[0-9]{4}" ,s[i]))
pob=[]
for i in range(0, len(s)-1):
  pob.append(re.findall(""+"([0-9]+((,)+[0-9]){0,1})" ,s[i]))

year= [pob[i][0][0] for i in range(0,len(pob))]
year=np.array(list(map(int,year)))
population=[pob[i][1][0].replace(",",".") for i in range(0,len(pob))]
population=np.array(list(map(float,population)))

plt.scatter(year,population,c="green")
plt.title("Figura 1:Población por año")
plt.xlabel("Año")
plt.ylabel('Población(millones)')
plt.show()

import numpy as np
#Creamos el arreglo de unos
on=np.ones(len(year))
#Arreglo que contiene los valores de la variable independiente
x=np.stack((on , year),axis=0).T
Ml=np.dot(x.T,x)
n=len(Ml)
id=np.identity(n)
#Concatenamos la matriz identidad con x, para crear la matriz aumentada
M=np.array(np.concatenate((Ml,id),axis=1))
objG = GaussJ()
#Aplicamos eliminación G-J
objG.Eliminacion(n,M)
M_inv=M[:,n:2*n]
M2=np.dot(population,x)
M_trans=np.dot(M_inv,M2)

import matplotlib.pyplot as plt
L=[]
m=[]
for i in range(1920,2031,2):
  L.append(i)
  m.append(i*M_trans[1]+M_trans[0])
plt.plot(L,m)
plt.scatter(year,population,c="green")
plt.title("Figura 2:Población por año con recta de regresión")
plt.xlabel("Año")
plt.ylabel('Población(millones)')
plt.show()

print("Matriz de regresión:\n",M_trans,"\n")
print("Pendiente:",M_trans[1],"\n")
print("Intercepto: ",M_trans[0])