# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G6JOT-nS7pJYZxIx90d2jocJIFwIquL4
"""

from sympy.abc import x, y
from sympy import *
import time
import numpy as np
import time
class NumericalMethods:
    def bisectionMethod(self, a, b, tol, func):

        if func.subs(x,a) * func.subs(x,b) < 0:
            print("Existe un cambio de signo")
        else: 
            print("No existen raices reales en el intervalo")
            exit(0) 
        error = 3
        c = (a + b) /2
        while(True):
            if  (b-a)<tol:
              return c
            elif float(func.subs(x,a))*float(func.subs(x,c)) > 0:
              a=c
            else:
              b=c
            c = (a + b)/2
            error=abs(b-a)

Solv=NumericalMethods()
a=-100
b=100
f="3*x**3+8"
f=sympify(f)
print(f)
inicio=time.time()
a=Solv.bisectionMethod(a,b,0.00001,f)
Fin=(time.time()-inicio)*1000
print("Tiempo: ",Fin, "ms")
print("Valor aproximado método de la bisección: ",a)
print("Valor real: ",float(solve(f)[0]))

from sympy import *
from sympy.abc import x
import matplotlib.pyplot as plt
x,y=symbols("x y")
from sympy import core

class Ing_Search:
  def evaluar(self,f,lx):
    ly=[]
    for i in (lx):
        ly.append(f.subs(x,i))
    return ly
        
  def nearest(self,f,lx): 
    evalua=self.evaluar(f,lx)
    sol=float(solve(f,x)[0])
    mascercano=min(evalua, key=lambda x:abs(x-sol))
    return mascercano
lx=np.arange(-100,100,0.01)
Inge=Ing_Search()
f="3*x**3+8"
f=sympify(f)
inic=time.time()
Y=Inge.evaluar(f,lx)
result=Inge.nearest(f,lx)
fin=(time.time()-inic)*1000
print("Tiempo: ",fin, "ms")
print("Valor real: ",float(solve(f)[0]))
print("Valor aproximado búsqueda ingenua: ", result)

import matplotlib.pyplot as plt
l=[Fin*100, fin]
x = np.arange(len(l))
ind = np.arange(len(l))
fig,ax = plt.subplots() 
ax.set_title("Comparación entre tiempos de cómputo")
ax.set_xticklabels(["Ingenuo","Bisección x100"][::-1], minor=False)
plt.bar(ind, l, color="green",width=0.5)
ax.set_ylabel('Tiempo')
ax.set_xticks(x)
ax.legend()
plt.show()